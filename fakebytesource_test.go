// Code generated by counterfeiter. DO NOT EDIT.
package i18n

import (
	"sync"
)

type fakeByteSource struct {
	BytesStub        func(name string) ([]byte, error)
	bytesMutex       sync.RWMutex
	bytesArgsForCall []struct {
		name string
	}
	bytesReturns *struct {
		result1 []byte
		result2 error
	}
	bytesReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *fakeByteSource) Bytes(name string) ([]byte, error) {
	fake.bytesMutex.Lock()
	ret, specificReturn := fake.bytesReturnsOnCall[len(fake.bytesArgsForCall)]
	fake.bytesArgsForCall = append(fake.bytesArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("Bytes", []interface{}{name})
	fake.bytesMutex.Unlock()
	if fake.BytesStub != nil {
		return fake.BytesStub(name)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	if fake.bytesReturns == nil {
		panic("Unexpected method call: ByteSource.Bytes()")
	}
	return fake.bytesReturns.result1, fake.bytesReturns.result2
}

func (fake *fakeByteSource) BytesCallCount() int {
	fake.bytesMutex.RLock()
	defer fake.bytesMutex.RUnlock()
	return len(fake.bytesArgsForCall)
}

func (fake *fakeByteSource) BytesArgsForCall(i int) string {
	fake.bytesMutex.RLock()
	defer fake.bytesMutex.RUnlock()
	return fake.bytesArgsForCall[i].name
}

func (fake *fakeByteSource) BytesReturns(result1 []byte, result2 error) {
	fake.BytesStub = nil
	fake.bytesReturns = &struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *fakeByteSource) BytesReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.BytesStub = nil
	if fake.bytesReturnsOnCall == nil {
		fake.bytesReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.bytesReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *fakeByteSource) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.bytesMutex.RLock()
	defer fake.bytesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *fakeByteSource) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ByteSource = new(fakeByteSource)
